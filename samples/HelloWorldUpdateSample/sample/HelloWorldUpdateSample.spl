namespace sample;

use com.ibm.streamsx.mongodb::*;

/**
* Run two beacons to create different inputs.
* Look inside [HelloWorldUpdateSample] SPL code to see different uses of UpdateDocument with the description.
*/
composite HelloWorldUpdateSample {
	graph
		stream<rstring greeting1> B1Stream = Beacon()  {
            param iterations: 1;
            output B1Stream :
            	greeting1 = "HELLO WORLD";
        }
        
		stream<rstring greeting2> B2Stream = Beacon()  {
            param iterations: 1;
            output B2Stream :
            	greeting2 = '{"Hello" : "again"}';
        }
        
        stream<rstring error1> MongoSink = Update(B1Stream; B2Stream) {
        	param
        		dbHost : "localhost";
        		findQuery : {greeting1 = {"$exists": true}};
        	/*
        	 * Uncomment authentication parameter for custom authentication method
        	 */

//        		authentication : {mechanism = getSubmissionTimeValue("mechanism", "SCRAM-SHA-1"),
//        						  user = getSubmissionTimeValue("username", "mongouser"),
//        						  pwd = getSubmissionTimeValue("password", "passw0rd"),
//        						  db = getSubmissionTimeValue("adminDB", "admin"),
//        						  digestPassword = (boolean)getSubmissionTimeValue("digestPassword", "true"),
//        						  serviceName = getSubmissionTimeValue("serviceName", ""),
//        						  serviceHostname = getSubmissionTimeValue("serviceHostname", "")};


        	/*
        	 * Uncomment sslOptions parameter to configure SSL
        	 */
				// Create etc directory and add there PEM file.
//        		sslOptions : {sslMode = true, caFile = "", pemKeyFile = getThisToolkitDir() + "/etc/mongodb.pem", pemKeyPassword = "", crlFile = "", allowInvalidCertificates = false, allowInvalidHostnames = false};

        	/*
        	 * Uncomment username/password parameters for a default authentication method
        	 */
//        		username : getSubmissionTimeValue("username", "mongouser");
//        		password : getSubmissionTimeValue("password", "passw0rd");

        	/*
        	 * Uncomment profiling parameter to enable profiling mode
        	 */
//        		profiling : all;

        	output MongoSink :
        		/**
				 * Update/Upsert samples:
				 */
        		error1 = UpdateDocument("streams", "sample", B1Stream); // Updates one document where 'greeting1' exists
//        		error1 = UpdateDocuments("streams", "sample", B1Stream); // Updates all documents where 'greeting1' exists
//        		error1 = UpsertDocument("streams", "sample", "$set", B1Stream); // Upserts one document where 'greeting1' exists
//        		error1 = UpsertDocuments("streams", "sample", "$set", B1Stream); // Upserts all document where 'greeting1' exists
//        		error1 = UpdateDocumentAsJson("streams", "sample", greeting2); // Updates one document with JSON where 'greeting1' exists
//        		error1 = UpdateDocumentsAsJson("streams", "sample", greeting2); // Updates all documents with JSON where 'greeting1' exists
//        		error1 = UpsertDocumentAsJson("streams", "sample", "$set", greeting2); // Upserts one document with JSON where 'greeting1' exists
//        		error1 = UpsertDocumentsAsJson("streams", "sample", "$set", greeting2); // Upserts all documents with JSON where 'greeting1' exists
        }
        
		/**
		 * Will be called when at least one error occured
		 */
        () as ErrorSink = FileSink(MongoSink)   {
            param
                file : "/dev/stdout";
                flush : 1u;
                quoteStrings : false;
        }
}
