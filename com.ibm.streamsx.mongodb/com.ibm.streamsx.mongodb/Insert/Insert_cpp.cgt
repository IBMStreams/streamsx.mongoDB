<%SPL::CodeGen::implementationPrologue($model);%>

<%
#	use Data::Dumper;
	use InsertCommon;

	my $dbHost = $model->getParameterByName('dbHost')->getValueAt(0)->getCppExpression();

	my $dbPortParam = $model->getParameterByName('dbPort');
	my $dbPort = (defined $dbPortParam) ? $dbPortParam->getValueAt(0)->getCppExpression() : 27017;
	
	my $timeoutParam = $model->getParameterByName('timeout');
	my $timeout = (defined $timeoutParam) ? $timeoutParam->getValueAt(0)->getCppExpression() : 0.0;
%>

string MY_OPERATOR::buildConnUrl(const string& dbHost, uint32_t dbPort) {
	string connUrl = dbHost;
	connUrl += ":"; 
	connUrl += spl_cast<rstring,uint32_t>::cast(dbPort);
	return connUrl;
}

string MY_OPERATOR::buildDbCollection(const string& db, const string& collection) {
	string dbCollection(db);
	dbCollection += ".";
	dbCollection += collection;
	return dbCollection;
}

MY_OPERATOR::MY_OPERATOR() {
	try {
		ScopedDbConnection conn(buildConnUrl(<%=$dbHost%>, <%=$dbPort%>), (double)<%=$timeout%>);
		if(!conn.ok()) {
			THROW(SPL::SPLRuntimeOperator, "MongoDB create connection failed");
		}
		conn.done();
	}
	catch( const DBException &e ) {
		THROW(SPL::SPLRuntimeOperator, e.what());
	}
}

MY_OPERATOR::~MY_OPERATOR() {}

void MY_OPERATOR::allPortsReady() {}
void MY_OPERATOR::prepareToShutdown() {}

void MY_OPERATOR::process(Tuple const & tuple, uint32_t port) {
	<%for (my $i = 0; $i < $model->getNumberOfInputPorts(); $i++) {%>
	  IPort<%=$i%>Type const & <%=$model->getInputPortAt($i)->getCppTupleName()%> = static_cast<IPort<%=$i%>Type const&>(tuple);
	<%}%>
	streams_boost::shared_ptr<OPort0Type> otuplePtr;
	bool errorFound = false;

	<% foreach my $attribute (@{$model->getOutputPortAt(0)->getAttributes()}) {
	  my $name = $attribute->getName();
	  if ($attribute->hasAssignmentWithOutputFunction()) {
		  my $operation = $attribute->getAssignmentOutputFunctionName();
		  if ($operation eq 'AsIs') {
			my $init = $attribute->getAssignmentOutputFunctionParameterValueAt(0)->getCppExpression();
		  %>
			otuplePtr->set_<%=$name%>(<%=$init%>);
		  <%}
		  else {
			my $numberOfParams = @{$attribute->getAssignmentOutputFunctionParameterValues};
			my $shift = $numberOfParams > 4 ? 2 : 0;
			my $expr = $attribute->getAssignmentOutputFunctionParameterValueAt(2+$shift);
			my $key = 'defaultKey';
			my $keyAssigned = $numberOfParams == 4 || $numberOfParams == 6;
			if ($keyAssigned) {
				$key = $attribute->getAssignmentOutputFunctionParameterValueAt(2+$shift)->getCppExpression();
				$expr = $attribute->getAssignmentOutputFunctionParameterValueAt(3+$shift);
			}
			my $exprLocation = $expr->getSourceLocation();
			my $cppExpr = $expr->getCppExpression();
			my $splType = $expr->getSPLType();
			%>
		{
			
			
			<%if ($keyAssigned) {
				if (SPL::CodeGen::Type::isPrimitive($splType)) {
					my $value = InsertCommon::handlePrimitive($exprLocation, $cppExpr, $splType);%>
					BSONObjBuilder b0;
					b0.append(<%=$key%>, <%=$value%>); 
				<%}
				else {
					my ($appendFunction,$objFunction) = InsertCommon::buildBSONObject($exprLocation, $cppExpr, $splType, 1);%>
					BSONObjBuilder b0;
					b0.<%=$appendFunction%>(<%=$key%>, b1.<%=$objFunction%>());
				<%}
			}
			else {
				if (InsertCommon::keyLess($splType)) {
					SPL::CodeGen::errorln("The type '%s' of the expression '%s' requires additional key parameter.", $splType, $expr->getSPLExpression(), $exprLocation) unless ($keyAssigned);
				}
				InsertCommon::buildBSONObject($exprLocation, $cppExpr, $splType, 0);
			}
			
			my $currentDbHost = $numberOfParams > 4 ? $attribute->getAssignmentOutputFunctionParameterValueAt(0)->getCppExpression()  : $dbHost;
			my $currentDbPort = $numberOfParams > 4 ? $attribute->getAssignmentOutputFunctionParameterValueAt(1)->getCppExpression()  : $dbPort;
			my $db = $attribute->getAssignmentOutputFunctionParameterValueAt(0+$shift)->getCppExpression();
			my $collection = $attribute->getAssignmentOutputFunctionParameterValueAt(1+$shift)->getCppExpression();
			%>
			
			rstring errorMsg = "";
			try {
				ScopedDbConnection conn(buildConnUrl(<%=$currentDbHost%>, <%=$currentDbPort%>), (double)<%=$timeout%>);
				
				if(conn.ok()) {
					conn->insert(buildDbCollection(<%=$db%>, <%=$collection%>), b0.obj());
					errorMsg = conn->DBClientWithCommands::getLastError();
					conn.done();
				}
				else {
					errorMsg = "MongoDB create connection failed";
				}
			}
			catch( const DBException &e ) {
				errorMsg = e.what();
			}
			
			if (errorMsg != "") {
				errorFound = true;
				SPLAPPLOG(L_ERROR, error, "MongoDB Insert");
				if(!otuplePtr){
					otuplePtr = streams_boost::shared_ptr<OPort0Type>(new OPort0Type());
				}
				otuplePtr->set_<%=$name%>(errorMsg);
			}
		}
		  <%}
	  }
	}%>
	if(errorFound) submit(*otuplePtr, 0);
}

<%SPL::CodeGen::implementationEpilogue($model);%>
