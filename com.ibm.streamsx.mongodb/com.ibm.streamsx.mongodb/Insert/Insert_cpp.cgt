<%SPL::CodeGen::implementationPrologue($model);%>

<%
	use File::Basename qw(dirname);
	
	unshift @INC, dirname($model->getContext()->getOperatorDirectory()) . '/Common';
	require BSONCommon;

	my $authentication = ($_ = $model->getParameterByName('authentication')) ? $_->getValueAt(0) : undef;
	my $username = ($_ = $model->getParameterByName('username')) ? $_->getValueAt(0)->getCppExpression() : undef;
	my $password = ($_ = $model->getParameterByName('password')) ? $_->getValueAt(0)->getCppExpression() : undef;

	unless ($authentication) {
		if ($username && !$password) {
			SPL::CodeGen::errorln("Password should be provided whithin username parameter", $model->getParameterByName('username')->getSourceLocation());
		}
		elsif (!$username && $password) {
			SPL::CodeGen::errorln("Username should be provided whithin password parameter", $model->getParameterByName('password')->getSourceLocation());
		}
	}

	my $dbHost = $model->getParameterByName('dbHost')->getValueAt(0)->getCppExpression();
	my $dbPort = ($_ = $model->getParameterByName('dbPort')) ? $_->getValueAt(0)->getCppExpression() : 27017;
	my $timeout = ($_ = $model->getParameterByName('timeout')) ? $_->getValueAt(0)->getCppExpression() : 0.0;
	my $profiling = ($_ = $model->getParameterByName('profiling')) ? $_->getValueAt(0)->getSPLExpression() : 'off';
	my $autoReconnect = ($_ = $model->getParameterByName('autoReconnect')) ? $_->getValueAt(0)->getCppExpression() : 'true';

	my $metricName = "nInserts";
	my $myOpParams = undef;
%>

@include "../Common/MongoOperator_cpp.cgt"

void MY_OPERATOR::process(Tuple const & tuple, uint32_t port) {
	<%
	my $numberOfInputPorts = $model->getNumberOfInputPorts();
	for (my $i = 0; $i < $numberOfInputPorts; $i++) {%>
	  IPort<%=$i%>Type const & <%=$model->getInputPortAt($i)->getCppTupleName()%> = static_cast<IPort<%=$i%>Type const&>(tuple);
	<%}%>
	streams_boost::shared_ptr<OPort0Type> otuplePtr;
	bool errorFound = false;

<%# [----- perl code -----]
	foreach my $attribute (@{$model->getOutputPortAt(0)->getAttributes()}) {
	  my $name = $attribute->getName();
	  if ($attribute->hasAssignmentWithOutputFunction()) {
		  my $operation = $attribute->getAssignmentOutputFunctionName();
		  my $isJson = ($operation =~ /AsJson$/) ? 1 : 0;

		  if ($operation eq 'AsIs') {
			my $init = $attribute->getAssignmentOutputFunctionParameterValueAt(0)->getCppExpression();
		  %>
			otuplePtr->set_<%=$name%>(<%=$init%>);
		  <%}
		  else {
			my $numberOfParams = @{$attribute->getAssignmentOutputFunctionParameterValues};
			my $expr;
			my $key = '';
			my $keyAssigned = $numberOfParams > 3;
			if ($keyAssigned) {
				$key = $attribute->getAssignmentOutputFunctionParameterValueAt(2)->getCppExpression();
				$expr = $attribute->getAssignmentOutputFunctionParameterValueAt(3);
			}
			else {
				$expr = $attribute->getAssignmentOutputFunctionParameterValueAt(2);
				if (!$isJson && BSONCommon::keyLess($expr->getSPLType())) {
					SPL::CodeGen::errorln("The type '%s' of the expression '%s' requires additional key parameter.", $expr->getSPLType(), $expr->getSPLExpression(), $expr->getSourceLocation());
				}
			}
			my $exprLocation = $expr->getSourceLocation();
			my $cppExpr = $expr->getCppExpression();
			my $splType = $expr->getSPLType();
			
			if ($numberOfInputPorts > 1 && $expr->hasStreamAttributes()) {
				my $portNumber = -1;
				for (my $i = 0; $i < $numberOfInputPorts; $i++) {
					if (index($cppExpr, $model->getInputPortAt($i)->getCppTupleName()) != -1) {
						if ($portNumber != -1) {
							SPL::CodeGen::errorln("Multiple input ports attributes in expression '%s' are used.", $expr->getSPLExpression(), $expr->getSourceLocation());
						}
						else {
							$portNumber = $i;
						}
					}
				}%>
		if(port == <%=$portNumber%>)
			<%}%>
		{
		
<%# [----- perl code -----]
			BSONCommon::buildBSONObjectWithKey($exprLocation, $key, $cppExpr, $splType, $isJson);
			
			my $db = $attribute->getAssignmentOutputFunctionParameterValueAt(0)->getCppExpression();
			my $collection = $attribute->getAssignmentOutputFunctionParameterValueAt(1)->getCppExpression();
# [----- perl code -----]%>
			
			DBClientConnection * connPtr = getDBClientConnection(<%=$db%>, <%=$dbHost%>, <%=$dbPort%>);
			
			if(connPtr->isFailed()) {
				if (<%=$autoReconnect%>) {
					SPLAPPLOG(L_ERROR, "Trying to reconnect to " << <%=$dbHost%> << ":" << <%=$dbPort%>, "MongoDB Connect");
					connPtr->isStillConnected();
				}
				else {
					THROW(SPL::SPLRuntimeOperator, "Connection to " << <%=$dbHost%> << ":" << <%=$dbPort%> << " aborted");
				}
			}
				
			<%if ($profiling eq 'slow') {%>
				connPtr->setDbProfilingLevel(<%=$db%>,  ProfileSlow);
			<%} elsif ($profiling eq 'all') {%>
				connPtr->setDbProfilingLevel(<%=$db%>,  ProfileAll);
			<%}%>
			
			connPtr->insert(buildDbCollection(<%=$db%>, <%=$collection%>), bsonObj);
			const string & errorMsg = connPtr->getLastError();
			
			if (errorMsg == "") {
				nInsertsMetric_.incrementValue();
			}
			else {				
				errorFound = true;
				SPLAPPLOG(L_ERROR, errorMsg, "MongoDB Insert");
				if(!otuplePtr){
					otuplePtr = streams_boost::shared_ptr<OPort0Type>(new OPort0Type());
				}
				otuplePtr->set_<%=$name%>(errorMsg);
			}
		}
		  <%}
	  }
	}%>
	if(errorFound) submit(*otuplePtr, 0);
}

@include "../Common/ThreadCommon_cpp.cgt"

<%SPL::CodeGen::implementationEpilogue($model);%>
