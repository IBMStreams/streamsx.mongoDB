<%SPL::CodeGen::implementationPrologue($model);%>

<%
	use File::Basename qw(dirname);
	use InsertCommon;
	
	unshift @INC, dirname($model->getContext()->getOperatorDirectory()) . '/Common';
	require BSONCommon;

	my $authentication = ($_ = $model->getParameterByName('authentication')) ? $_->getValueAt(0) : undef;
	my $username = ($_ = $model->getParameterByName('username')) ? $_->getValueAt(0)->getCppExpression() : undef;
	my $password = ($_ = $model->getParameterByName('password')) ? $_->getValueAt(0)->getCppExpression() : undef;

	unless ($authentication) {
		if ($username && !$password) {
			SPL::CodeGen::errorln("Password should be provided whithin username parameter", $model->getParameterByName('username')->getSourceLocation());
		}
		elsif (!$username && $password) {
			SPL::CodeGen::errorln("Username should be provided whithin password parameter", $model->getParameterByName('password')->getSourceLocation());
		}
	}

	my $dbHost = $model->getParameterByName('dbHost')->getValueAt(0)->getCppExpression();
	my $dbPort = ($_ = $model->getParameterByName('dbPort')) ? $_->getValueAt(0)->getCppExpression() : 27017;
	my $timeout = ($_ = $model->getParameterByName('timeout')) ? $_->getValueAt(0)->getCppExpression() : 0.0;
	my $profiling = ($_ = $model->getParameterByName('profiling')) ? $_->getValueAt(0)->getSPLExpression() : 'off';
%>

string MY_OPERATOR::buildConnUrl(const string& dbHost, uint32_t dbPort) {
	string connUrl = dbHost;
	connUrl += ":"; 
	connUrl += spl_cast<rstring,uint32_t>::cast(dbPort);
	return connUrl;
}

string MY_OPERATOR::buildDbCollection(const string& db, const string& collection) {
	string dbCollection(db);
	dbCollection += ".";
	dbCollection += collection;
	return dbCollection;
}

MY_OPERATOR::MY_OPERATOR() : dcpsMetric_(getContext().getMetrics().getCustomMetricByName("dbConnectionPoolSize")) {

	if(!MongoInit<void>::status_.isOK()) {
		THROW(SPL::SPLRuntimeOperator, "MongoDB initialization failed");
	}
}

MY_OPERATOR::~MY_OPERATOR() {}

void MY_OPERATOR::allPortsReady() {

	try {
		ScopedDbConnection conn(buildConnUrl(<%=$dbHost%>, <%=$dbPort%>), (double)<%=$timeout%>);
		if(!conn.ok()) {
			THROW(SPL::SPLRuntimeOperator, "MongoDB create connection failed");
		}
		dcpsMetric_.setValueNoLock(conn.getNumConnections());

		<%if ($authentication) {
			BSONCommon::buildBSONObject($authentication->getSourceLocation(), $authentication->getCppExpression(), $authentication->getSPLType(), 0);%>
			conn->auth(b0.obj());
		<%}
		elsif ($username) {%>
			if(!conn->auth("admin", <%=$username%>, <%=$password%>, errmsg)) {
				throw DBException(errmsg, 9999);
			}
		<%}%>

		conn.done();
	}
	catch( const DBException &e ) {
		THROW(SPL::SPLRuntimeOperator, e.what());
	}
}

void MY_OPERATOR::prepareToShutdown() {
	client::shutdown();
}

void MY_OPERATOR::process(Tuple const & tuple, uint32_t port) {
	<%
	my $numberOfInputPorts = $model->getNumberOfInputPorts();
	for (my $i = 0; $i < $numberOfInputPorts; $i++) {%>
	  IPort<%=$i%>Type const & <%=$model->getInputPortAt($i)->getCppTupleName()%> = static_cast<IPort<%=$i%>Type const&>(tuple);
	<%}%>
	streams_boost::shared_ptr<OPort0Type> otuplePtr;
	bool errorFound = false;

<%# [----- perl code -----]
	foreach my $attribute (@{$model->getOutputPortAt(0)->getAttributes()}) {
	  my $name = $attribute->getName();
	  if ($attribute->hasAssignmentWithOutputFunction()) {
		  my $operation = $attribute->getAssignmentOutputFunctionName();
		  if ($operation eq 'AsIs') {
			my $init = $attribute->getAssignmentOutputFunctionParameterValueAt(0)->getCppExpression();
		  %>
			otuplePtr->set_<%=$name%>(<%=$init%>);
		  <%}
		  else {
			my $numberOfParams = @{$attribute->getAssignmentOutputFunctionParameterValues};
			my $shift = $numberOfParams > 4 ? 2 : 0;
			my $expr;
			my $key = '';
			my $keyAssigned = $numberOfParams == 4 || $numberOfParams == 6;
			if ($keyAssigned) {
				$key = $attribute->getAssignmentOutputFunctionParameterValueAt(2+$shift)->getCppExpression();
				$expr = $attribute->getAssignmentOutputFunctionParameterValueAt(3+$shift);
			}
			else {
				$expr = $attribute->getAssignmentOutputFunctionParameterValueAt(2+$shift);
				if (InsertCommon::keyLess($expr->getSPLType())) {
					SPL::CodeGen::errorln("The type '%s' of the expression '%s' requires additional key parameter.", $expr->getSPLType(), $expr->getSPLExpression(), $expr->getSourceLocation());
				}
			}
			my $exprLocation = $expr->getSourceLocation();
			my $cppExpr = $expr->getCppExpression();
			my $splType = $expr->getSPLType();
			
			if ($numberOfInputPorts > 1 && $expr->hasStreamAttributes()) {
				my $portNumber = -1;
				for (my $i = 0; $i < $numberOfInputPorts; $i++) {
					if (index($cppExpr, $model->getInputPortAt($i)->getCppTupleName()) != -1) {
						if ($portNumber != -1) {
							SPL::CodeGen::errorln("Multiple input ports attributes in expression '%s' are used.", $expr->getSPLExpression(), $expr->getSourceLocation());
						}
						else {
							$portNumber = $i;
						}
					}
				}%>
		if(port == <%=$portNumber%>)
			<%}%>
		{
		
<%# [----- perl code -----]
			InsertCommon::buildBSONObjectWithKey($exprLocation, $key, $cppExpr, $splType);
			
			my $currentDbHost = $numberOfParams > 4 ? $attribute->getAssignmentOutputFunctionParameterValueAt(0)->getCppExpression()  : $dbHost;
			my $currentDbPort = $numberOfParams > 4 ? $attribute->getAssignmentOutputFunctionParameterValueAt(1)->getCppExpression()  : $dbPort;
			my $db = $attribute->getAssignmentOutputFunctionParameterValueAt(0+$shift)->getCppExpression();
			my $collection = $attribute->getAssignmentOutputFunctionParameterValueAt(1+$shift)->getCppExpression();
# [----- perl code -----]%>
			
			rstring errorMsg = "";
			try {
				ScopedDbConnection conn(buildConnUrl(<%=$currentDbHost%>, <%=$currentDbPort%>), (double)<%=$timeout%>);
				dcpsMetric_.setValue(conn.getNumConnections());
				
				if(conn.ok()) {
					
					<%if ($profiling eq 'slow') {%>
						conn->DBClientWithCommands::setDbProfilingLevel(<%=$db%>,  DBClientWithCommands::ProfileSlow);
					<%} elsif ($profiling eq 'all') {%>
						conn->DBClientWithCommands::setDbProfilingLevel(<%=$db%>,  DBClientWithCommands::ProfileAll);
					<%}%>
					
					conn->insert(buildDbCollection(<%=$db%>, <%=$collection%>), b0.obj());
					errorMsg = conn->DBClientWithCommands::getLastError();
					conn.done();
				}
				else {
					errorMsg = "MongoDB create connection failed";
				}
			}
			catch( const DBException &e ) {
				errorMsg = e.what();
			}
			
			if (errorMsg != "") {
				errorFound = true;
				SPLAPPLOG(L_ERROR, error, "MongoDB Insert");
				if(!otuplePtr){
					otuplePtr = streams_boost::shared_ptr<OPort0Type>(new OPort0Type());
				}
				otuplePtr->set_<%=$name%>(errorMsg);
			}
		}
		  <%}
	  }
	}%>
	if(errorFound) submit(*otuplePtr, 0);
}

<%SPL::CodeGen::implementationEpilogue($model);%>
