<%SPL::CodeGen::implementationPrologue($model);%>

<%
	use File::Basename qw(dirname);
	use QueryCommon;

	unshift @INC, dirname($model->getContext()->getOperatorDirectory()) . '/Common';
	require BSONCommon;

	my $db = $model->getParameterByName('dbName')->getValueAt(0)->getCppExpression();
	my $collection = $model->getParameterByName('collection')->getValueAt(0)->getCppExpression();

	my $dbHost = $model->getParameterByName('dbHost')->getValueAt(0)->getCppExpression();
	my $dbPort = ($_ = $model->getParameterByName('dbPort')) ? $_->getValueAt(0)->getCppExpression() : 27017;

	my $findFieldsExpr = ($_ = $model->getParameterByName('findFields')) ? $_->getValueAt(0) : undef;
	my $findQueryExpr = ($_ = $model->getParameterByName('findQuery')) ? $_->getValueAt(0) : undef;
	SPL::CodeGen::errorln("The type '%s' of findQuery parameter is not a map or a tuple.", $findQueryExpr->getSPLType(), $findQueryExpr->getSourceLocation())
		if (defined $findQueryExpr && QueryCommon::keyLess($findQueryExpr->getSPLType()));

	my $nToReturn = ($_ = $model->getParameterByName('nToReturn')) ? $_->getValueAt(0)->getCppExpression() : 0;
	my $timeout = ($_ = $model->getParameterByName('timeout')) ? $_->getValueAt(0)->getCppExpression() : 0.0;

	my $inputPort = $model->getInputPortAt(0);
	my $outputPort = $model->getOutputPortAt(0);
	my $inTuple = $inputPort->getCppTupleName();
%>

string MY_OPERATOR::buildConnUrl(const string& dbHost, uint32_t dbPort) {
	string connUrl = dbHost;
	connUrl += ":"; 
	connUrl += spl_cast<rstring,uint32_t>::cast(dbPort);
	return connUrl;
}

string MY_OPERATOR::buildDbCollection(const string& db, const string& collection) {
	string dbCollection(db);
	dbCollection += ".";
	dbCollection += collection;
	return dbCollection;
}

BSONObj MY_OPERATOR::buildFindFieldsBO() {
<%if (defined $findFieldsExpr && (not $findFieldsExpr->hasStreamAttributes())) {
	BSONCommon::buildBSONObject($findFieldsExpr->getSourceLocation(), $findFieldsExpr->getCppExpression(), $findFieldsExpr->getSPLType(), 0);%>
	return b0.obj();
<%}
else {%>
	return BSONObj();
<%}%>
}

BSONObj MY_OPERATOR::buildFindQueryBO() {
<%if (defined $findQueryExpr && (not $findQueryExpr->hasStreamAttributes())) {
	BSONCommon::buildBSONObject($findQueryExpr->getSourceLocation(), $findQueryExpr->getCppExpression(), $findQueryExpr->getSPLType(), 0);%>
	return b0.obj();
<%}
else {%>
	return BSONObj();
<%}%>
}

MY_OPERATOR::MY_OPERATOR() : findFieldsBO_(buildFindFieldsBO()), findQueryBO_(buildFindQueryBO()) {
	try {
		ScopedDbConnection conn(buildConnUrl(<%=$dbHost%>, <%=$dbPort%>), (double)<%=$timeout%>);
		if(!conn.ok()) {
			THROW(SPL::SPLRuntimeOperator, "MongoDB create connection failed");
		}
		conn.done();
	}
	catch( const DBException &e ) {
		THROW(SPL::SPLRuntimeOperator, e.what());
	}
}

MY_OPERATOR::~MY_OPERATOR() {}

void MY_OPERATOR::allPortsReady() {}
void MY_OPERATOR::prepareToShutdown() {}

void MY_OPERATOR::process(Tuple const & tuple, uint32_t port) {
	<%for (my $i = 0; $i < $model->getNumberOfInputPorts(); $i++) {%>
	  IPort<%=$i%>Type const & <%=$model->getInputPortAt($i)->getCppTupleName()%> = static_cast<IPort<%=$i%>Type const&>(tuple);
	<%}%>
	OPort0Type * otuplePtr = getOutputTuple();
	
	<%foreach my $attribute (@{$outputPort->getAttributes()}) {
	  my $attrName = $attribute->getName();
	  if ($attribute->hasAssignmentWithOutputFunction()) {
	  	if ($attribute->getAssignmentOutputFunctionName() eq 'AsIs') {
			my $assign = $attribute->getAssignmentOutputFunctionParameterValueAt(0)->getCppExpression();%>
			otuplePtr->set_<%=$attrName%>(<%=$assign%>);
		<%}
	  }
	  elsif ($attribute->hasAssignment()) {
			my $assign = $attribute->getAssignmentValue()->getCppExpression();%>
			otuplePtr->set_<%=$attrName%>(<%=$assign%>);
	  <%}
	}%>

	<%if (defined $findFieldsExpr && $findFieldsExpr->hasStreamAttributes()) {%>
		const BSONObj & findFieldsBO = buildFindFieldsBO();
	<%}
	else {%>
		const BSONObj & findFieldsBO = findFieldsBO_;
	<%}%>

	<%if (defined $findQueryExpr && $findQueryExpr->hasStreamAttributes()) {%>
		const BSONObj & findQueryBO = buildFindQueryBO();
	<%}
	else {%>
		const BSONObj & findQueryBO = findQueryBO_;
	<%}%>
	
	streams_boost::scoped_ptr<ScopedDbConnection> conn;
	bool docFound = false;
	
	rstring errorMsg = "";
	try {
		conn.reset(new ScopedDbConnection(buildConnUrl(<%=$dbHost%>, <%=$dbPort%>), (double)<%=$timeout%>));

		if(!conn->ok()) {
			errorMsg = "MongoDB create connection failed";
		}
	}
	catch( const DBException &e ) {
		errorMsg = e.what();
	}

	if (errorMsg != "") {
		SPLAPPLOG(L_ERROR, error, "MongoDB Query");
	}

	if(conn->ok()) {
		streams_boost::scoped_ptr<DBClientCursor> cursor((*conn)->query(buildDbCollection(<%=$db%>, <%=$collection%>),
																		findQueryBO,
																		<%=$nToReturn%>, NULL,
																		&findFieldsBO,
																		NULL, NULL));
		docFound = cursor->more();
		while (cursor->more()) {
			const BSONObj & queryResultBO = cursor->next();
			OPort0Type otuple(*otuplePtr);
			size_t tupleHash = otuple.hashCode();

<%# [----- perl code -----]
		foreach my $attribute (@{$outputPort->getAttributes()}) {
			my $attrName = $attribute->getName();
			my $attrType = $attribute->getSPLType();
			my $attrFN = $attribute->getAssignmentOutputFunctionName() if $_ = $attribute->hasAssignmentWithOutputFunction();
			if ($_ && $attrFN ne 'AsIs') {
				if ($attrFN eq 'QueryDocumentFieldAsJson') {
					QueryCommon::handleBSONObjectAsJson($attrName, $attrType);
				}
				else {
					my $attrNameNotInBO = $attrFN eq 'QueryDocumentMultipleFields';
					my $exprLocation = $attribute->getAssignmentSourceLocation();
					my $cppType = $attribute->getCppType();
					my $numberOfParams = @{$attribute->getAssignmentOutputFunctionParameterValues};
					my $findPath = $numberOfParams > 0 ? $attribute->getAssignmentOutputFunctionParameterValueAt(0)->getCppExpression() : '';
	
					QueryCommon::initBSONObject($attrName, $attrNameNotInBO, $cppType, $findPath);
	
					QueryCommon::handleBSONObject($exprLocation, $attrName, $attrType, 0);
	
					QueryCommon::endBSONObject();
				}
			}
		}
# [----- perl code -----]%>

			if(otuple.hashCode() != tupleHash) submit(otuple, 0);
		}
		conn->done();
	}

	if(!docFound) submit(*otuplePtr, 0);
}

streams_boost::thread_specific_ptr<MY_OPERATOR::OPort0Type> MY_OPERATOR::otuplePtr_;

MY_OPERATOR::OPort0Type * MY_OPERATOR::getOutputTuple() {
	OPort0Type * otuplePtr = otuplePtr_.get();
	if(!otuplePtr) {
		otuplePtr_.reset(new OPort0Type());
		otuplePtr_->clear();
		otuplePtr = otuplePtr_.get();
	}
	return otuplePtr;
}

<%SPL::CodeGen::implementationEpilogue($model);%>
