<%SPL::CodeGen::implementationPrologue($model);%>

<%
	use File::Basename qw(dirname);

	unshift @INC, dirname($model->getContext()->getOperatorDirectory()) . '/Common';
	require BSONCommon;
	require QueryCommon;

	my $authentication = ($_ = $model->getParameterByName('authentication')) ? $_->getValueAt(0) : undef;
	my $username = ($_ = $model->getParameterByName('username')) ? $_->getValueAt(0)->getCppExpression() : undef;
	my $password = ($_ = $model->getParameterByName('password')) ? $_->getValueAt(0)->getCppExpression() : undef;

	unless ($authentication) {
		if ($username && !$password) {
			SPL::CodeGen::errorln("Password should be provided whithin username parameter", $model->getParameterByName('username')->getSourceLocation());
		}
		elsif (!$username && $password) {
			SPL::CodeGen::errorln("Username should be provided whithin password parameter", $model->getParameterByName('password')->getSourceLocation());
		}
	}
	
	my $db = $model->getParameterByName('dbName')->getValueAt(0)->getCppExpression();
	my $dbHost = $model->getParameterByName('dbHost')->getValueAt(0)->getCppExpression();
	my $dbPort = ($_ = $model->getParameterByName('dbPort')) ? $_->getValueAt(0)->getCppExpression() : 27017;
	my $collection = $model->getParameterByName('collection')->getValueAt(0)->getCppExpression();

	my $findFieldsExpr = ($_ = $model->getParameterByName('findFields')) ? $_->getValueAt(0) : undef;
	my $findQueryExpr = ($_ = $model->getParameterByName('findQuery')) ? $_->getValueAt(0) : undef;
	SPL::CodeGen::errorln("The type '%s' of findQuery parameter is not a string, map or tuple.", $findQueryExpr->getSPLType(), $findQueryExpr->getSourceLocation())
		if (defined $findQueryExpr && BSONCommon::keyLess($findQueryExpr->getSPLType()) && not SPL::CodeGen::Type::isString($findQueryExpr->getSPLType()));

	my $nToReturn = ($_ = $model->getParameterByName('nToReturn')) ? $_->getValueAt(0)->getCppExpression() : 0;
	my $timeout = ($_ = $model->getParameterByName('timeout')) ? $_->getValueAt(0)->getCppExpression() : 0.0;
	my $profiling = ($_ = $model->getParameterByName('profiling')) ? $_->getValueAt(0)->getSPLExpression() : 'off';
	my $autoReconnect = ($_ = $model->getParameterByName('autoReconnect')) ? $_->getValueAt(0)->getCppExpression() : 'true';

	my $inputPort = $model->getInputPortAt(0);
	my $outputPort = $model->getOutputPortAt(0);
	my $inTuple = $inputPort->getCppTupleName();

	my $metricName = "nQueries";
	my $findFieldsBO = 'findFieldsBO_('.((defined $findFieldsExpr && not $findFieldsExpr->hasStreamAttributes()) ? 'buildFindFieldsBO()' : 'BSONObj()').')';
	my $findQueryBO = 'findQueryBO_('.((defined $findQueryExpr && not $findQueryExpr->hasStreamAttributes()) ? 'buildFindQueryBO()' : 'BSONObj()').')';
	my $myOpParams = "$findFieldsBO, $findQueryBO";
%>

@include "../Common/QueryCommon_cpp.cgt"
@include "../Common/MongoOperator_cpp.cgt"

void MY_OPERATOR::process(Tuple const & tuple, uint32_t port) {
	<%for (my $i = 0; $i < $model->getNumberOfInputPorts(); $i++) {%>
	  IPort<%=$i%>Type const & <%=$model->getInputPortAt($i)->getCppTupleName()%> = static_cast<IPort<%=$i%>Type const&>(tuple);
	<%}%>
	OPort0Type * otuplePtr = getOutputTuple();
	
	<%foreach my $attribute (@{$outputPort->getAttributes()}) {
	  my $attrName = $attribute->getName();
	  if ($attribute->hasAssignmentWithOutputFunction()) {
	  	if ($attribute->getAssignmentOutputFunctionName() eq 'AsIs') {
			my $assign = $attribute->getAssignmentOutputFunctionParameterValueAt(0)->getCppExpression();%>
			otuplePtr->set_<%=$attrName%>(<%=$assign%>);
		<%}
	  }
	  elsif ($attribute->hasAssignment()) {
			my $assign = $attribute->getAssignmentValue()->getCppExpression();%>
			otuplePtr->set_<%=$attrName%>(<%=$assign%>);
	  <%}
	}%>

	<%if (defined $findFieldsExpr && $findFieldsExpr->hasStreamAttributes()) {%>
		const BSONObj & findFieldsBO = buildFindFieldsBO(tuple);
	<%}
	else {%>
		const BSONObj & findFieldsBO = findFieldsBO_;
	<%}%>

	<%if (defined $findQueryExpr && $findQueryExpr->hasStreamAttributes()) {%>
		const BSONObj & findQueryBO = buildFindQueryBO(tuple);
	<%}
	else {%>
		const BSONObj & findQueryBO = findQueryBO_;
	<%}%>
	
	bool docFound = false;

	DBClientConnection * connPtr = getDBClientConnection(<%=$db%>, <%=$dbHost%>, <%=$dbPort%>);

	if(connPtr->isFailed()) {
		if (<%=$autoReconnect%>) {
			SPLAPPLOG(L_ERROR, "Trying to reconnect to " << <%=$dbHost%> << ":" << (<%=$dbPort%>), "MongoDB Connect");
			connPtr->isStillConnected();
		}
		else {
			THROW(SPL::SPLRuntimeOperator, "Connection to " << <%=$dbHost%> << ":" << (<%=$dbPort%>) << " aborted");
		}
	}
		
	<%if ($profiling eq 'slow') {%>
		connPtr->DBClientWithCommands::setDbProfilingLevel(<%=$db%>,  DBClientWithCommands::ProfileSlow);
	<%} elsif ($profiling eq 'all') {%>
		connPtr->DBClientWithCommands::setDbProfilingLevel(<%=$db%>,  DBClientWithCommands::ProfileAll);
	<%}%>
	
	streams_boost::scoped_ptr<DBClientCursor> cursor(connPtr->query(buildDbCollection(<%=$db%>, <%=$collection%>),
																	findQueryBO,
																	<%=$nToReturn%>, 0,
																	&findFieldsBO,
																	0, 0));
	const string & errorMsg = connPtr->getLastError();
	if (errorMsg != "") {
		SPLAPPLOG(L_ERROR, errorMsg, "MongoDB Query");
	}
	else {
		nQueriesMetric_.incrementValue();

		docFound = cursor->more();
		while (cursor->more()) {
			const BSONObj & queryResultBO = cursor->next();
			OPort0Type otuple(*otuplePtr);
			size_t tupleHash = otuple.hashCode();

<%# [----- perl code -----]
		foreach my $attribute (@{$outputPort->getAttributes()}) {
			my $attrName = $attribute->getName();
			my $attrType = $attribute->getSPLType();
			my $attrFN = $attribute->getAssignmentOutputFunctionName() if $_ = $attribute->hasAssignmentWithOutputFunction();
			if ($_ && $attrFN ne 'AsIs') {
				if ($attrFN eq 'QueryDocumentFieldAsJson') {
					QueryCommon::handleBSONObjectAsJson($attrName, $attrType);
				}
				else {
					my $attrNameNotInBO = $attrFN eq 'QueryDocumentMultipleFields';
					my $exprLocation = $attribute->getAssignmentSourceLocation();
					my $cppType = $attribute->getCppType();
					my $numberOfParams = @{$attribute->getAssignmentOutputFunctionParameterValues};
					my $findPath = $numberOfParams > 0 ? $attribute->getAssignmentOutputFunctionParameterValueAt(0)->getCppExpression() : '';
	
					QueryCommon::initBSONObject($attrName, $attrNameNotInBO, $cppType, $findPath);
	
					QueryCommon::handleBSONObject($exprLocation, $attrName, $attrType, 0);
	
					QueryCommon::endBSONObject();
				}
			}
		}
# [----- perl code -----]%>

			if(otuple.hashCode() != tupleHash) submit(otuple, 0);
		}
	
		if(docFound) {
			submit(Punctuation::WindowMarker, 0);
		}
		else {
			submit(*otuplePtr, 0);
		}
	}
}

// static thread_specific_ptr initialization
streams_boost::thread_specific_ptr<MY_OPERATOR::OPort0Type> MY_OPERATOR::otuplePtr_;

MY_OPERATOR::OPort0Type * MY_OPERATOR::getOutputTuple() {
	OPort0Type * otuplePtr = otuplePtr_.get();
	if(!otuplePtr) {
		otuplePtr_.reset(new OPort0Type());
		otuplePtr_->clear();
		otuplePtr = otuplePtr_.get();
	}
	return otuplePtr;
}

@include "../Common/ThreadCommon_cpp.cgt"

<%SPL::CodeGen::implementationEpilogue($model);%>
