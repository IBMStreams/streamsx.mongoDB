#include <SPL/Runtime/Operator/OperatorMetrics.h>
#include <streams_boost/thread/tss.hpp>
#include <streams_boost/typeof/typeof.hpp>
#include <streams_boost/foreach.hpp>
#define foreach STREAMS_BOOST_FOREACH

#include "Mongo.h"

using std::string;

using namespace mongo;

<%SPL::CodeGen::headerPrologue($model);%>

template<class Void>
struct MongoInit {
	static Status status_;
};

template<class Void>
Status MongoInit<Void>::status_ = client::initialize();

class MY_OPERATOR: public MY_BASE_OPERATOR {

public:
	MY_OPERATOR();
	virtual ~MY_OPERATOR();

	void allPortsReady();
	void prepareToShutdown();

	void process(Tuple const & tuple, uint32_t port);

private:
	Metric & nQueriesMetric_;

	static streams_boost::thread_specific_ptr<OPort0Type> otuplePtr_;
	OPort0Type * getOutputTuple();

	static streams_boost::thread_specific_ptr<DBClientConnection> connPtr_;
	DBClientConnection * getDBClientConnection(const string& dbHost, uint32_t dbPort);
	
	BSONObj findFieldsBO_;
	BSONObj buildFindFieldsBO();

	BSONObj findQueryBO_;
	BSONObj buildFindQueryBO();

	string buildConnUrl(const string& dbHost, uint32_t dbPort);
	string buildDbCollection(const string& db, const string& collection);
};

<%SPL::CodeGen::headerEpilogue($model);%>
