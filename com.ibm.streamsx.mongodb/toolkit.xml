<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<toolkitModel xmlns="http://www.ibm.com/xmlns/prod/streams/spl/toolkit" productVersion="3.2.1.3" xmlns:common="http://www.ibm.com/xmlns/prod/streams/spl/common" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

  <toolkit name="com.ibm.streamsx.mongodb" requiredProductVersion="3.1.0" version="1.0.0.1">
    <description>
Support for [http://www.mongodb.org|MongoDB] database.

MongoDB is an open-source document-oriented NoSQL database.
[http://bsonspec.org|BSON] is a binary serialization JSON-like format used to store documents and make remote procedure calls in MongoDB.
This toolkit provides MongoDB insert/query functionality where SPL to/from BSON conversion is generated automatically.

Below a table for BSON/SPL conversion:

	BSON	SPL
	
	BinData	blob
	Bool	boolean
	N/A	complex
	Date	timestamp
	Double	decimal/float64
	Int	(u)int8
	Int	(u)int16
	Int	(u)int32
	Long	(u)int64
	String	enum/rstring/ustring/xml
	Array	List/Set
	Object	Tuple/Map

**Third-party libraries**
* This toolkit embeds mongodb headers/libraries under impl/&lt;include|lib&gt;.
   </description>
    <uriTable>
      <uri index="2" value="com.ibm.streamsx.mongodb/Query"/>
      <uri index="1" value="com.ibm.streamsx.mongodb/Insert"/>
    </uriTable>
    <namespace name="com.ibm.streamsx.mongodb">
      <primitiveOp language="Cpp" modelUriIndex="1" name="Insert" public="true">
        <description>
Insert writes SPL data to MongoDB collection. No predefined db schema is required, the data is automatically mapped from SPL to BSON format.
The operator uses db connection pool and supports multiple threads.

Insert has one custom output function:
* InsertDocument writes data (any SPL expression) with or without a specified root tag.

Multiple input ports are allowed and their attributes can be used in multiple InsertDocument calls, but cannot be mixed in the same call.

One output port is defined for use with custom output functions and optionally to propogate returned errors downstream.
      </description>
        <customLiterals name="ProfilingLevel">
          <value name="off"/>
          <value name="slow"/>
          <value name="all"/>
        </customLiterals>
        <outputFunctions name="MongoFS">
          <function name="AsIs" returnType="T">
            <description>a default assignment</description>
            <prototype>&lt;any T&gt; T AsIs(T v)</prototype>
            <parameter name="v" type="T"/>
          </function>
          <function name="InsertDocument" returnType="rstring">
            <description>writes 'data' to 'db.coolection'. T can be of type tuple or map only.</description>
            <prototype>&lt;any T&gt; rstring InsertDocument(rstring db, rstring collection, T data)</prototype>
            <parameter name="db" type="rstring"/>
            <parameter name="collection" type="rstring"/>
            <parameter name="data" type="T"/>
          </function>
          <function name="InsertDocument" returnType="rstring">
            <description>writes 'data' to 'db.coolection' with a 'key' as a root element.</description>
            <prototype>&lt;any T&gt; rstring InsertDocument(rstring db, rstring collection, rstring key, T data)</prototype>
            <parameter name="db" type="rstring"/>
            <parameter name="collection" type="rstring"/>
            <parameter name="key" type="rstring"/>
            <parameter name="data" type="T"/>
          </function>
          <function name="InsertDocument" returnType="rstring">
            <description>connects to 'dbHost:dbPort' and writes 'data' to 'db.coolection'. T can be of type tuple or map only.</description>
            <prototype>&lt;any T&gt; rstring InsertDocument(rstring dbHost, uint32 dbPort, rstring db, rstring collection, T data)</prototype>
            <parameter name="dbHost" type="rstring"/>
            <parameter name="dbPort" type="uint32"/>
            <parameter name="db" type="rstring"/>
            <parameter name="collection" type="rstring"/>
            <parameter name="data" type="T"/>
          </function>
          <function name="InsertDocument" returnType="rstring">
            <description>connects to 'dbHost:dbPort' and writes 'data' to 'db.coolection' with a 'key' as a root element.</description>
            <prototype>&lt;any T&gt; rstring InsertDocument(rstring dbHost, uint32 dbPort, rstring db, rstring collection, rstring key, T data)</prototype>
            <parameter name="dbHost" type="rstring"/>
            <parameter name="dbPort" type="uint32"/>
            <parameter name="db" type="rstring"/>
            <parameter name="collection" type="rstring"/>
            <parameter name="key" type="rstring"/>
            <parameter name="data" type="T"/>
          </function>
        </outputFunctions>
        <parametersDescription/>
        <parameter cardinality="1" expressionMode="AttributeFree" name="dbHost" optional="false" type="rstring">
          <description>The mandatory 'rstring' parameter specifies MongoDB server host.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="dbPort" optional="true" type="uint32">
          <description>The optional 'uint32' parameter specifies MongoDB server listener port. Default value is 27017.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="timeout" optional="true" type="float64">
          <description>The optional 'float64' parameter specifies connection timeout. Default value is 0.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="CustomLiteral" name="profiling" optional="true" type="ProfilingLevel">
          <description>The optional ProfilingLevel parameter specifies profiling level. Default value is off.</description>
        </parameter>
        <inputPort minNumPorts="0" optional="true" windowPunctInputMode="Oblivious">
          <description>The Insert operator is configurable with multiple input ports. The input ports are non-mutating and their punctuation mode is Oblivious.</description>
          <windowPolicy>NonWindowed</windowPolicy>
        </inputPort>
        <outputPort expressionMode="Expression" maxNumPorts="1" minNumPorts="1" optional="false" windowPunctOutputMode="Free">
          <description>The Insert operator is configurable with one output port. The output port is non-mutating and their punctuation mode is Free.</description>
        </outputPort>
        <codeTemplate name="Insert" template="stream&lt;rstring error> ${outputStream}1 = Insert(${inputStream}){&#xA;&#x9;param&#xA;&#x9;&#x9;dbHost : &quot;localhost&quot;;&#xA;&#x9;output ${outputStream} :&#xA;&#x9;&#x9;error = InsertDocument(&quot;db&quot;, &quot;collection&quot;, attr);&#xA;}&#xA;">
          <description>Basic Insert template</description>
        </codeTemplate>
      </primitiveOp>
      <primitiveOp language="Cpp" modelUriIndex="2" name="Query" public="true">
        <description>
Query reads SPL data from MongoDB collection. No predefined db schema is required, the data is automatically mapped from BSON to SPL.
The operator uses db connection pool and supports multiple threads.

Query has three custom output functions:
* QueryDocumentField reads data from a fieldName as the output attribute name, with or without a specified search field tag.
* QueryDocumentMultipleFields reads data under a fieldName as the output attribute name, with or without a specified search field tag..
* QueryDocumentFieldAsJson reads the whole data as JSON string.

Single input port is allowed.

One output port is defined for use with custom output functions, multiple tuples maybe submitted per one query.
      </description>
        <customLiterals name="ProfilingLevel">
          <value name="off"/>
          <value name="slow"/>
          <value name="all"/>
        </customLiterals>
        <outputFunctions name="MongoFS">
          <function name="AsIs" returnType="T">
            <description/>
            <prototype>&lt;any T&gt; T AsIs(T v)</prototype>
            <parameter name="v" type="T"/>
          </function>
          <function name="QueryDocumentFieldAsJson" returnType="T">
            <description>Reads document from 'db.coolection' as a JSON string. T can be of type rstring or ustring only.</description>
            <prototype>&lt;string T&gt; T QueryDocumentFieldAsJson()</prototype>
          </function>
          <function name="QueryDocumentField" returnType="T">
            <description>Reads document from 'db.coolection'. Searched for output assignment attribute name.</description>
            <prototype>&lt;any T&gt; T QueryDocumentField()</prototype>
          </function>
          <function name="QueryDocumentField" returnType="T">
            <description>Reads document from 'db.coolection'. Searched for output assignment attribute name, then for a findPath name.</description>
            <prototype>&lt;any T&gt; T QueryDocumentField(rstring findPath)</prototype>
            <parameter name="findPath" type="rstring"/>
          </function>
          <function name="QueryDocumentMultipleFields" returnType="T">
            <description>Reads multiple documents from 'db.coolection'. Searched for all documents under output assignment attribute name.</description>
            <prototype>&lt;any T&gt; T QueryDocumentMultipleFields()</prototype>
          </function>
          <function name="QueryDocumentMultipleFields" returnType="T">
            <description>Reads multiple documents from 'db.coolection'. Searched for all documents under output assignment attribute name, then for a findPath name.</description>
            <prototype>&lt;any T&gt; T QueryDocumentMultipleFields(rstring findPath)</prototype>
            <parameter name="findPath" type="rstring"/>
          </function>
        </outputFunctions>
        <parametersDescription/>
        <parameter cardinality="1" expressionMode="AttributeFree" name="collection" optional="false" type="rstring">
          <description>The mandatory 'rstring' parameter specifies MongoDB collection.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="dbName" optional="false" type="rstring">
          <description>The mandatory 'rstring' parameter specifies MongoDB database.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="dbHost" optional="false" type="rstring">
          <description>The mandatory 'rstring' parameter specifies MongoDB server host.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="dbPort" optional="true" type="uint32">
          <description>The optional 'uint32' parameter specifies MongoDB server listener port. Default value is 27017.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="findFields" optional="true" type="map&lt;rstring,int32>">
          <description>The optional 'map&lt;rstring,int32&gt;' parameter specifies which fields to include or drop from the result.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="findQuery" optional="true" type="">
          <description>The optional map or tuple parameter specifies a [http://docs.mongodb.org/manual/reference/operator/query|query] to get specific data from MongoDB collection.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="nToReturn" optional="true" type="uint32">
          <description>The optional 'uint32' parameter specifies max number of documents to fetch.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="timeout" optional="true" type="float64">
          <description>The optional 'float64' parameter specifies connection timeout. Default value is 0.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="CustomLiteral" name="profiling" optional="true" type="ProfilingLevel">
          <description>The optional ProfilingLevel parameter specifies profiling level. Default value is off.</description>
        </parameter>
        <inputPort maxNumPorts="1" minNumPorts="1" optional="false" windowPunctInputMode="Oblivious">
          <description>The Query operator is configurable with a single input port. The input port is non-mutating and its punctuation mode is Oblivious.</description>
          <windowPolicy>NonWindowed</windowPolicy>
        </inputPort>
        <outputPort expressionMode="Expression" maxNumPorts="1" minNumPorts="1" optional="false" windowPunctOutputMode="Generating">
          <description>The Query operator is configurable with one output port. The output port is non-mutating and their punctuation mode is Generating.</description>
        </outputPort>
        <codeTemplate name="Query" template="stream&lt;${schema}> ${outputStream} = Query(${inputStream}) {&#xA;&#x9;param&#xA;&#x9;&#x9;dbHost : &quot;&quot;;&#xA;&#x9;&#x9;dbName : &quot;&quot;;&#xA;&#x9;&#x9;collection : &quot;&quot;;&#xA;&#x9;output ${outputStream} :&#xA;&#x9;&#x9;attr = QueryDocumentField();&#xA;}">
          <description>Basic Query template</description>
        </codeTemplate>
      </primitiveOp>
    </namespace>
  </toolkit>

</toolkitModel>
